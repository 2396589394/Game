// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: LoginServer/login.proto

#include "LoginServer/login.pb.h"
#include "LoginServer/login.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace Login {

static const char* LoginRPC_method_names[] = {
  "/Login.LoginRPC/thirdparty",
};

std::unique_ptr< LoginRPC::Stub> LoginRPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LoginRPC::Stub> stub(new LoginRPC::Stub(channel));
  return stub;
}

LoginRPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_thirdparty_(LoginRPC_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LoginRPC::Stub::thirdparty(::grpc::ClientContext* context, const ::Login::ThirdpartyRequest& request, ::Login::ThirdpartyReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_thirdparty_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Login::ThirdpartyReply>* LoginRPC::Stub::AsyncthirdpartyRaw(::grpc::ClientContext* context, const ::Login::ThirdpartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Login::ThirdpartyReply>::Create(channel_.get(), cq, rpcmethod_thirdparty_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Login::ThirdpartyReply>* LoginRPC::Stub::PrepareAsyncthirdpartyRaw(::grpc::ClientContext* context, const ::Login::ThirdpartyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Login::ThirdpartyReply>::Create(channel_.get(), cq, rpcmethod_thirdparty_, context, request, false);
}

LoginRPC::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoginRPC_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoginRPC::Service, ::Login::ThirdpartyRequest, ::Login::ThirdpartyReply>(
          std::mem_fn(&LoginRPC::Service::thirdparty), this)));
}

LoginRPC::Service::~Service() {
}

::grpc::Status LoginRPC::Service::thirdparty(::grpc::ServerContext* context, const ::Login::ThirdpartyRequest* request, ::Login::ThirdpartyReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Login

