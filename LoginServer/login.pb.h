// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LoginServer/login.proto

#ifndef PROTOBUF_INCLUDED_LoginServer_2flogin_2eproto
#define PROTOBUF_INCLUDED_LoginServer_2flogin_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_LoginServer_2flogin_2eproto 

namespace protobuf_LoginServer_2flogin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_LoginServer_2flogin_2eproto
namespace Login {
class ThirdpartyReply;
class ThirdpartyReplyDefaultTypeInternal;
extern ThirdpartyReplyDefaultTypeInternal _ThirdpartyReply_default_instance_;
class ThirdpartyRequest;
class ThirdpartyRequestDefaultTypeInternal;
extern ThirdpartyRequestDefaultTypeInternal _ThirdpartyRequest_default_instance_;
}  // namespace Login
namespace google {
namespace protobuf {
template<> ::Login::ThirdpartyReply* Arena::CreateMaybeMessage<::Login::ThirdpartyReply>(Arena*);
template<> ::Login::ThirdpartyRequest* Arena::CreateMaybeMessage<::Login::ThirdpartyRequest>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Login {

// ===================================================================

class ThirdpartyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Login.ThirdpartyRequest) */ {
 public:
  ThirdpartyRequest();
  virtual ~ThirdpartyRequest();

  ThirdpartyRequest(const ThirdpartyRequest& from);

  inline ThirdpartyRequest& operator=(const ThirdpartyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThirdpartyRequest(ThirdpartyRequest&& from) noexcept
    : ThirdpartyRequest() {
    *this = ::std::move(from);
  }

  inline ThirdpartyRequest& operator=(ThirdpartyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThirdpartyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThirdpartyRequest* internal_default_instance() {
    return reinterpret_cast<const ThirdpartyRequest*>(
               &_ThirdpartyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ThirdpartyRequest* other);
  friend void swap(ThirdpartyRequest& a, ThirdpartyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThirdpartyRequest* New() const final {
    return CreateMaybeMessage<ThirdpartyRequest>(NULL);
  }

  ThirdpartyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThirdpartyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ThirdpartyRequest& from);
  void MergeFrom(const ThirdpartyRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThirdpartyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  const ::std::string& code() const;
  void set_code(const ::std::string& value);
  #if LANG_CXX11
  void set_code(::std::string&& value);
  #endif
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  ::std::string* mutable_code();
  ::std::string* release_code();
  void set_allocated_code(::std::string* code);

  // uint32 mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::google::protobuf::uint32 mode() const;
  void set_mode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Login.ThirdpartyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr code_;
  ::google::protobuf::uint32 mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LoginServer_2flogin_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ThirdpartyReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Login.ThirdpartyReply) */ {
 public:
  ThirdpartyReply();
  virtual ~ThirdpartyReply();

  ThirdpartyReply(const ThirdpartyReply& from);

  inline ThirdpartyReply& operator=(const ThirdpartyReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ThirdpartyReply(ThirdpartyReply&& from) noexcept
    : ThirdpartyReply() {
    *this = ::std::move(from);
  }

  inline ThirdpartyReply& operator=(ThirdpartyReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ThirdpartyReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ThirdpartyReply* internal_default_instance() {
    return reinterpret_cast<const ThirdpartyReply*>(
               &_ThirdpartyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ThirdpartyReply* other);
  friend void swap(ThirdpartyReply& a, ThirdpartyReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ThirdpartyReply* New() const final {
    return CreateMaybeMessage<ThirdpartyReply>(NULL);
  }

  ThirdpartyReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ThirdpartyReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ThirdpartyReply& from);
  void MergeFrom(const ThirdpartyReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThirdpartyReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string userId = 1;
  void clear_userid();
  static const int kUserIdFieldNumber = 1;
  const ::std::string& userid() const;
  void set_userid(const ::std::string& value);
  #if LANG_CXX11
  void set_userid(::std::string&& value);
  #endif
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  ::std::string* mutable_userid();
  ::std::string* release_userid();
  void set_allocated_userid(::std::string* userid);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string headimgurl = 4;
  void clear_headimgurl();
  static const int kHeadimgurlFieldNumber = 4;
  const ::std::string& headimgurl() const;
  void set_headimgurl(const ::std::string& value);
  #if LANG_CXX11
  void set_headimgurl(::std::string&& value);
  #endif
  void set_headimgurl(const char* value);
  void set_headimgurl(const char* value, size_t size);
  ::std::string* mutable_headimgurl();
  ::std::string* release_headimgurl();
  void set_allocated_headimgurl(::std::string* headimgurl);

  // string token = 6;
  void clear_token();
  static const int kTokenFieldNumber = 6;
  const ::std::string& token() const;
  void set_token(const ::std::string& value);
  #if LANG_CXX11
  void set_token(::std::string&& value);
  #endif
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  ::std::string* mutable_token();
  ::std::string* release_token();
  void set_allocated_token(::std::string* token);

  // uint64 gold = 5;
  void clear_gold();
  static const int kGoldFieldNumber = 5;
  ::google::protobuf::uint64 gold() const;
  void set_gold(::google::protobuf::uint64 value);

  // bool sex = 3;
  void clear_sex();
  static const int kSexFieldNumber = 3;
  bool sex() const;
  void set_sex(bool value);

  // @@protoc_insertion_point(class_scope:Login.ThirdpartyReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr userid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr headimgurl_;
  ::google::protobuf::internal::ArenaStringPtr token_;
  ::google::protobuf::uint64 gold_;
  bool sex_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_LoginServer_2flogin_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ThirdpartyRequest

// string code = 1;
inline void ThirdpartyRequest::clear_code() {
  code_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ThirdpartyRequest::code() const {
  // @@protoc_insertion_point(field_get:Login.ThirdpartyRequest.code)
  return code_.GetNoArena();
}
inline void ThirdpartyRequest::set_code(const ::std::string& value) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.ThirdpartyRequest.code)
}
#if LANG_CXX11
inline void ThirdpartyRequest::set_code(::std::string&& value) {
  
  code_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.ThirdpartyRequest.code)
}
#endif
inline void ThirdpartyRequest::set_code(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.ThirdpartyRequest.code)
}
inline void ThirdpartyRequest::set_code(const char* value, size_t size) {
  
  code_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.ThirdpartyRequest.code)
}
inline ::std::string* ThirdpartyRequest::mutable_code() {
  
  // @@protoc_insertion_point(field_mutable:Login.ThirdpartyRequest.code)
  return code_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThirdpartyRequest::release_code() {
  // @@protoc_insertion_point(field_release:Login.ThirdpartyRequest.code)
  
  return code_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThirdpartyRequest::set_allocated_code(::std::string* code) {
  if (code != NULL) {
    
  } else {
    
  }
  code_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), code);
  // @@protoc_insertion_point(field_set_allocated:Login.ThirdpartyRequest.code)
}

// uint32 mode = 2;
inline void ThirdpartyRequest::clear_mode() {
  mode_ = 0u;
}
inline ::google::protobuf::uint32 ThirdpartyRequest::mode() const {
  // @@protoc_insertion_point(field_get:Login.ThirdpartyRequest.mode)
  return mode_;
}
inline void ThirdpartyRequest::set_mode(::google::protobuf::uint32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:Login.ThirdpartyRequest.mode)
}

// -------------------------------------------------------------------

// ThirdpartyReply

// string userId = 1;
inline void ThirdpartyReply::clear_userid() {
  userid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ThirdpartyReply::userid() const {
  // @@protoc_insertion_point(field_get:Login.ThirdpartyReply.userId)
  return userid_.GetNoArena();
}
inline void ThirdpartyReply::set_userid(const ::std::string& value) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.ThirdpartyReply.userId)
}
#if LANG_CXX11
inline void ThirdpartyReply::set_userid(::std::string&& value) {
  
  userid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.ThirdpartyReply.userId)
}
#endif
inline void ThirdpartyReply::set_userid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.ThirdpartyReply.userId)
}
inline void ThirdpartyReply::set_userid(const char* value, size_t size) {
  
  userid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.ThirdpartyReply.userId)
}
inline ::std::string* ThirdpartyReply::mutable_userid() {
  
  // @@protoc_insertion_point(field_mutable:Login.ThirdpartyReply.userId)
  return userid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThirdpartyReply::release_userid() {
  // @@protoc_insertion_point(field_release:Login.ThirdpartyReply.userId)
  
  return userid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThirdpartyReply::set_allocated_userid(::std::string* userid) {
  if (userid != NULL) {
    
  } else {
    
  }
  userid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), userid);
  // @@protoc_insertion_point(field_set_allocated:Login.ThirdpartyReply.userId)
}

// string name = 2;
inline void ThirdpartyReply::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ThirdpartyReply::name() const {
  // @@protoc_insertion_point(field_get:Login.ThirdpartyReply.name)
  return name_.GetNoArena();
}
inline void ThirdpartyReply::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.ThirdpartyReply.name)
}
#if LANG_CXX11
inline void ThirdpartyReply::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.ThirdpartyReply.name)
}
#endif
inline void ThirdpartyReply::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.ThirdpartyReply.name)
}
inline void ThirdpartyReply::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.ThirdpartyReply.name)
}
inline ::std::string* ThirdpartyReply::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:Login.ThirdpartyReply.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThirdpartyReply::release_name() {
  // @@protoc_insertion_point(field_release:Login.ThirdpartyReply.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThirdpartyReply::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Login.ThirdpartyReply.name)
}

// bool sex = 3;
inline void ThirdpartyReply::clear_sex() {
  sex_ = false;
}
inline bool ThirdpartyReply::sex() const {
  // @@protoc_insertion_point(field_get:Login.ThirdpartyReply.sex)
  return sex_;
}
inline void ThirdpartyReply::set_sex(bool value) {
  
  sex_ = value;
  // @@protoc_insertion_point(field_set:Login.ThirdpartyReply.sex)
}

// string headimgurl = 4;
inline void ThirdpartyReply::clear_headimgurl() {
  headimgurl_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ThirdpartyReply::headimgurl() const {
  // @@protoc_insertion_point(field_get:Login.ThirdpartyReply.headimgurl)
  return headimgurl_.GetNoArena();
}
inline void ThirdpartyReply::set_headimgurl(const ::std::string& value) {
  
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.ThirdpartyReply.headimgurl)
}
#if LANG_CXX11
inline void ThirdpartyReply::set_headimgurl(::std::string&& value) {
  
  headimgurl_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.ThirdpartyReply.headimgurl)
}
#endif
inline void ThirdpartyReply::set_headimgurl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.ThirdpartyReply.headimgurl)
}
inline void ThirdpartyReply::set_headimgurl(const char* value, size_t size) {
  
  headimgurl_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.ThirdpartyReply.headimgurl)
}
inline ::std::string* ThirdpartyReply::mutable_headimgurl() {
  
  // @@protoc_insertion_point(field_mutable:Login.ThirdpartyReply.headimgurl)
  return headimgurl_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThirdpartyReply::release_headimgurl() {
  // @@protoc_insertion_point(field_release:Login.ThirdpartyReply.headimgurl)
  
  return headimgurl_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThirdpartyReply::set_allocated_headimgurl(::std::string* headimgurl) {
  if (headimgurl != NULL) {
    
  } else {
    
  }
  headimgurl_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), headimgurl);
  // @@protoc_insertion_point(field_set_allocated:Login.ThirdpartyReply.headimgurl)
}

// uint64 gold = 5;
inline void ThirdpartyReply::clear_gold() {
  gold_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ThirdpartyReply::gold() const {
  // @@protoc_insertion_point(field_get:Login.ThirdpartyReply.gold)
  return gold_;
}
inline void ThirdpartyReply::set_gold(::google::protobuf::uint64 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:Login.ThirdpartyReply.gold)
}

// string token = 6;
inline void ThirdpartyReply::clear_token() {
  token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ThirdpartyReply::token() const {
  // @@protoc_insertion_point(field_get:Login.ThirdpartyReply.token)
  return token_.GetNoArena();
}
inline void ThirdpartyReply::set_token(const ::std::string& value) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Login.ThirdpartyReply.token)
}
#if LANG_CXX11
inline void ThirdpartyReply::set_token(::std::string&& value) {
  
  token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Login.ThirdpartyReply.token)
}
#endif
inline void ThirdpartyReply::set_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Login.ThirdpartyReply.token)
}
inline void ThirdpartyReply::set_token(const char* value, size_t size) {
  
  token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Login.ThirdpartyReply.token)
}
inline ::std::string* ThirdpartyReply::mutable_token() {
  
  // @@protoc_insertion_point(field_mutable:Login.ThirdpartyReply.token)
  return token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ThirdpartyReply::release_token() {
  // @@protoc_insertion_point(field_release:Login.ThirdpartyReply.token)
  
  return token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ThirdpartyReply::set_allocated_token(::std::string* token) {
  if (token != NULL) {
    
  } else {
    
  }
  token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), token);
  // @@protoc_insertion_point(field_set_allocated:Login.ThirdpartyReply.token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Login

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_LoginServer_2flogin_2eproto
